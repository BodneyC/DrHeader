# -*- coding: utf-8 -*-

"""Utils for drheader console script."""

import json

import click

from junit_xml import TestSuite, TestCase
from tabulate import tabulate

# import junit

def echo_bulk_report(audit, json_output=False):
    """
    Output bulk report.

    :param audit: audit from core
    :param json_output: json output flag
    :return: None
    """

    if json_output:
        click.echo(json.dumps(audit))
    else:
        for i in audit:
            issues_header = '{url}: {issues} issues'.format(issues=len(i['report']), url=i['url'])
            click.echo()
            click.echo(issues_header)
            click.echo('=' * len(issues_header))
            for _ in i['report']:
                for v, k in _.items():
                    click.echo('{}: {}'.format(v, k))
                click.echo('----')


def file_junit_report(rules, report):
    """
    Output file Junit xml report

    :param rules: set of rules to verify
    :param report: report generated by drheader
    :return: None
    """

    test_suites = []

    for header in rules:
        test_cases = []
        if any(item.get('rule') == header for item in report):
            for item in report:
                if item.get('rule') == header:
                    details = item.copy()
                    details.pop('rule')
                    details.pop('message')
                    tc = TestCase(header, '', '', details)
                    tc.add_failure_info(item.get('message'))
                    test_cases.append(tc)
        else:
            test_cases.append(TestCase(header))

        test_suites.append(TestSuite(header, test_cases))

    with open('junit.xml', 'w') as f:
        TestSuite.to_file(f, test_suites, prettyprint=True)
